esphome:
  name: tinyavr
  friendly_name: TinyAVR
  platformio_options:
    board_build.f_cpu: 160000000L

esp8266:
  board: esp12e
  restore_from_flash: True

preferences:
  flash_write_interval: 1min

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret ha_encryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Tinyavr Fallback Hotspot"
    password: !secret wifi_ap_password

captive_portal:


 # Example configuration entry
globals:
  - id: last_vol_value
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_slr_value
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_cen_value
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_sw_value
    type: int
    restore_value: yes
    initial_value: '0'

script:
  - id: vol_up_pressed
    then:
      - lambda: if (id(last_vol_value) >= 23) { id(last_vol_value) = 22; }
      - number.increment:
          id: vol
          cycle: false

  - id: vol_down_pressed
    then:
      - lambda: if (id(last_vol_value) <= 0) { id(last_vol_value) = 1; }
      - number.decrement:
          id: vol
          cycle: false

  - id: slr_up_pressed
    then:
      - lambda: if (id(last_slr_value) >= 25) { id(last_slr_value) = 24; }
      - number.increment:
          id: slr
          cycle: false

  - id: slr_down_pressed
    then:
      - lambda: if (id(last_slr_value) <= 0) { id(last_slr_value) = 1; }
      - number.decrement:
          id: slr
          cycle: false

  - id: cen_up_pressed
    then:
      - lambda: if (id(last_cen_value) >= 25) { id(last_cen_value) = 24; }
      - number.increment:
          id: cen
          cycle: false

  - id: cen_down_pressed
    then:
      - lambda: if (id(last_cen_value) <= 0) { id(last_cen_value) = 1; }
      - number.decrement:
          id: cen
          cycle: false

  - id: sw_up_pressed
    then:
      - lambda: if (id(last_sw_value) >= 25) { id(last_sw_value) = 24; }
      - number.increment:
          id: sw
          cycle: false

  - id: sw_down_pressed
    then:
      - lambda: if (id(last_sw_value) <= 0) { id(last_sw_value) = 1; }
      - number.decrement:
          id: sw
          cycle: false
    
external_components:
  - source: github://Palakis/esphome-native-hdmi-cec

hdmi_cec:
  # Pick a GPIO pin that can do both input AND output
  pin: GPIO14 # Required
  # The address can be anything you want. Use 0xF if you only want to listen to the bus and not act like a standard device
  address: 0xF # Required
  # Physical address of the device. In this case: 4.0.0.0 (HDMI4 on the TV)
  # DDC support is not yet implemented, so you'll have to set this manually.
  physical_address: 0x3000 # Required
  # The name that will we displayed in the list of devices on your TV/receiver
  osd_name: "TinyAVR" # Optional. Defaults to "esphome"
  # By default, promiscuous mode is disabled, so the component only handles directly-address messages (matching
  # the address configured above) and broadcast messages. Enabling promiscuous mode will make the component
  # listen for all messages (both in logs and the on_message triggers)
  promiscuous_mode: true # Optional. Defaults to false
  # By default, monitor mode is disabled, so the component can send messages and acknowledge incoming messages.
  # Enabling monitor mode lets the component act as a passive listener, disabling active manipulation of the CEC bus.
  monitor_mode: true # Optional. Defaults to false
  # List of triggers to handle specific commands. Each trigger has the following optional filter parameters:
  # - "source": match messages coming from the specified address
  # - "destination": match messages meant for the specified address
  # - "opcode": match messages bearing the specified opcode
  # - "data": exact-match on message content
  # Actions called from these triggers is called with "source", "destination" and "data" as parameters
  on_message:
    # Volume Up
    - data: [0x44, 0x41]
      then:
        - logger.log: "Volume Up"
        - script.execute: vol_up_pressed
    # Volume Down
    - data: [0x44, 0x42]
      then:
        - logger.log: "Volume Down"
        - script.execute: vol_down_pressed
    # Mute
    - data: [0x44, 0x43]
      then:
        - logger.log: "Mute"
        - remote_transmitter.transmit_nec:
            address: 0xFF00
            command: 0xB847

# Example configuration entry
remote_transmitter:
  id: ir_transmitter
  pin:
    number: GPIO4
    inverted: true
  carrier_duty_percent: 100%

remote_receiver:
  pin:
    number: GPIO5
    inverted: true
  dump: all
  on_nec:
    then:
      - lambda: |-
          switch (x.command) {
            case 0xBF40:
              id(vol_up_pressed).execute();
              break;
            case 0xE619:
              id(vol_down_pressed).execute();
              break;
            case 0x9E61:
              id(slr_up_pressed).execute();
              break;
            case 0x9D62:
              id(slr_down_pressed).execute();
              break;
            case 0xCE31:
              id(cen_up_pressed).execute();
              break;
            case 0xCD32:
              id(cen_down_pressed).execute();
              break;
            case 0x9A65:
              id(sw_up_pressed).execute();
              break;
            case 0x9966:
              id(sw_down_pressed).execute();
              break;
            default:
              auto call = id(ir_transmitter).transmit();
              esphome::remote_base::NECProtocol().encode(call.get_data(), x);
              call.perform();
              break;
          }

# Individual switches
button:
  - platform: template
    name: "Vol+"
    on_press:
      - script.execute: vol_up_pressed
  
  - platform: template
    name: "Vol-"
    on_press:
      - script.execute: vol_down_pressed

  - platform: template
    name: "SLR+"
    on_press:
      - script.execute: slr_up_pressed

  - platform: template
    name: "SLR-"
    on_press:
      - script.execute: slr_down_pressed

  - platform: template
    name: "CEN+"
    on_press:
      - script.execute: cen_up_pressed

  - platform: template
    name: "CEN-"
    on_press:
      - script.execute: cen_down_pressed

  - platform: template
    name: "SW+"
    on_press:
      - script.execute: sw_up_pressed

  - platform: template
    name: "SW-"
    on_press:
      - script.execute: sw_down_pressed

  - platform: template
    name: "Power"
    on_press:
      remote_transmitter.transmit_nec:
        address: 0xFF00
        command: 0xBA45
  
  - platform: template
    name: "Mute"
    on_press:
      remote_transmitter.transmit_nec:
        address: 0xFF00
        command: 0xB847
  
  - platform: template
    name: "Reset Vol"
    on_press:
      then:
        - remote_transmitter.transmit_nec:
            address: 0xFF00
            command: 0xB847
        - lambda: id(last_vol_value) = 0;
        - number.set:
            id: vol
            value: 23
        - lambda: id(last_slr_value) = 0;
        - number.set:
            id: slr
            value: 25
        - lambda: id(last_cen_value) = 0;
        - number.set:
            id: cen
            value: 25
        - lambda: id(last_sw_value) = 0;
        - number.set:
            id: sw
            value: 25
        - number.set:
            id: vol
            value: 12
        - remote_transmitter.transmit_nec:
            address: 0xFF00
            command: 0xB847

# Example configuration entry
number:
  - platform: template
    setup_priority: -100 # mandatory to prevent initialization before globals restored
    id: vol
    name: "Vol"
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 23
    step: 1
    initial_value: 0
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("vol", "Last: %d New: %d", id(last_vol_value), (int)x);
            int diff = x - id(last_vol_value);
            id(last_vol_value) = x;
            ESP_LOGD("vol", "Vol diff: %d", diff);

            if (diff == 0) return; // nothing to do here

            uint16_t command = diff > 0 ? 0xBF40 : 0xE619;
            auto call = id(ir_transmitter).transmit();
            esphome::remote_base::NECData data = { 0xFF00, command, 1 };
            esphome::remote_base::NECProtocol().encode(call.get_data(), data);
            call.set_send_times(abs(diff));
            call.set_send_wait(1000); // 1ms
            call.perform();

  - platform: template
    setup_priority: -100 # mandatory to prevent initialization before globals restored
    id: slr
    name: "SLR"
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 25
    step: 1
    initial_value: 0
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("slr", "Last: %d New: %d", id(last_slr_value), (int)x);
            int diff = x - id(last_slr_value);
            id(last_slr_value) = x;
            ESP_LOGD("slr", "SLR diff: %d", diff);

            if (diff == 0) return; // nothing to do here

            uint16_t command = diff > 0 ? 0x9E61 : 0x9D62;
            auto call = id(ir_transmitter).transmit();
            esphome::remote_base::NECData data = { 0xFF00, command, 1 };
            esphome::remote_base::NECProtocol().encode(call.get_data(), data);
            call.set_send_times(abs(diff));
            call.set_send_wait(1000); // 1ms
            call.perform();

  - platform: template
    setup_priority: -100 # mandatory to prevent initialization before globals restored
    id: cen
    name: "CEN"
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 25
    step: 1
    initial_value: 0
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("cen", "Last: %d New: %d", id(last_cen_value), (int)x);
            int diff = x - id(last_cen_value);
            id(last_cen_value) = x;
            ESP_LOGD("cen", "CEN diff: %d", diff);

            if (diff == 0) return; // nothing to do here

            uint16_t command = diff > 0 ? 0xCE31 : 0xCD32;
            auto call = id(ir_transmitter).transmit();
            esphome::remote_base::NECData data = { 0xFF00, command, 1 };
            esphome::remote_base::NECProtocol().encode(call.get_data(), data);
            call.set_send_times(abs(diff));
            call.set_send_wait(1000); // 1ms
            call.perform();

  - platform: template
    setup_priority: -100 # mandatory to prevent initialization before globals restored
    id: sw
    name: "SW"
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 25
    step: 1
    initial_value: 0
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("sw", "Last: %d New: %d", id(last_sw_value), (int)x);
            int diff = x - id(last_sw_value);
            id(last_sw_value) = x;
            ESP_LOGD("sw", "SW diff: %d", diff);

            if (diff == 0) return; // nothing to do here

            uint16_t command = diff > 0 ? 0x9A65 : 0x9966;
            auto call = id(ir_transmitter).transmit();
            esphome::remote_base::NECData data = { 0xFF00, command, 1 };
            esphome::remote_base::NECProtocol().encode(call.get_data(), data);
            call.set_send_times(abs(diff));
            call.set_send_wait(1000); // 1ms
            call.perform();
